namespace ClubSite.Migrations
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.Linq;
    using ClubSite.Model;

    internal sealed class Configuration : DbMigrationsConfiguration<ClubSite.Model.ClubSiteContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = true;
        }
<<<<<<< HEAD
       
=======

>>>>>>> 25062f9c3961bf8b81819bae609e80f6be597f4b

        protected override void Seed(ClubSite.Model.ClubSiteContext context)
        {
            //Truncate data
<<<<<<< HEAD
=======
            context.Database.ExecuteSqlCommand(@"delete from dbo.Races");
>>>>>>> 25062f9c3961bf8b81819bae609e80f6be597f4b
            context.Database.ExecuteSqlCommand(@"delete from dbo.RaceTypes;
                                                 dbcc checkident ('dbo.RaceTypes',Reseed,0);");
            context.Database.ExecuteSqlCommand(@"delete from dbo.Sports;
                                                 dbcc checkident ('dbo.Sports',Reseed,0);");
            context.Database.ExecuteSqlCommand(@"delete from dbo.Members");
<<<<<<< HEAD
                        
            //Seed Tables
            GetSports().ForEach(sp => context.Sports.Add(sp));
            GetRaceTypes().ForEach(rt => context.RaceTypes.Add(rt));
=======

            //Seed Tables
            GetSports().ForEach(sp => context.Sports.Add(sp));
            GetRaceTypes().ForEach(rt => context.RaceTypes.Add(rt));
            GetRaces().ForEach(r => context.Races.Add(r));
>>>>>>> 25062f9c3961bf8b81819bae609e80f6be597f4b
            GetMembers().ForEach(m => context.Members.Add(m));

            //Save Data into BD
            context.SaveChanges();
        }

        private static List<Sport> GetSports()
        {
            var aListOfSports = new List<Sport> {
                new Sport {SportID=1,Name="Triatlón",Memo="Todo tipo de triatlones, cross y carretera, y cualquier distancia"},
                new Sport {SportID=2,Name="Duatlón",Memo="Todo tipo de duatlones, carretera, cross, etc..."},
                new Sport {SportID=3,Name="Running",Memo="Todo tipo de carreras a pie"},
                new Sport {SportID=4,Name="Ciclismo",Memo="Todo tipo de carreras con bicicleta."},
                new Sport {SportID=5,Name="Natación",Memo="Todo tipo de pruebas de natación"} };
            return aListOfSports;
        }

        private static List<RaceType> GetRaceTypes()
        {
            var aListOfRaceTypes = new List<RaceType> {
                new RaceType { RaceTypeID=1,  Name="Super Sprint", Points=80, SportID=1, Memo="Triatlones distancia Super Sprint: (375/10/2,5)" },
                new RaceType { RaceTypeID=2,  Name="Sprint", Points=100, SportID=1,Memo="Triatlones distancia Sprint: (750/20/5)" },
                new RaceType { RaceTypeID=3,  Name="Olímpico", Points=125, SportID=1, Memo ="Triatlones distancia Super Sprint: (1500/20/10)"},
                new RaceType { RaceTypeID=4,  Name="Media Distancia", Points=250, SportID=1, Memo="Triatlones media distancia o medio Ironman: (1,9/90/21)"},
                new RaceType { RaceTypeID=5,  Name="Larga Distancia", Points=500, SportID=1, Memo="Triatlones larga distancia o Ironman: (3,8/180/42)" },
                new RaceType { RaceTypeID=6,  Name="Ultra Distancia", Points=1000, SportID=1, Memo="Triatlones ultra distancia o Ultraman" },

                new RaceType { RaceTypeID=7,  Name="Super Sprint", Points=50, SportID=2, Memo="Duatlones distancia Super Sprint" },
                new RaceType { RaceTypeID=8,  Name="Sprint", Points=80, SportID=2, Memo="Duatlones distancia Sprint " },
                new RaceType { RaceTypeID=9,  Name="Olímpico", Points=100, SportID=2, Memo="Duatlones distancia Olímpica" },

                new RaceType { RaceTypeID=10,  Name="Menor de 9km", Points=40, SportID=3, Memo="Carreras a pie menores de 9 kilómetros" },
                new RaceType { RaceTypeID=11,  Name="Entre 9 y 11km", Points=50, SportID=3, Memo="Carreras a pié entre 9 y 11 kilómetros" },
                new RaceType { RaceTypeID=12,  Name="Entre 12 y 21 km", Points=80, SportID=3, Memo="Carreras a pié entre 22 y 29 kilómetros" },
                new RaceType { RaceTypeID=13,  Name="Entre 22 y 29km", Points=100, SportID=3, Memo="Carreras a pié entre 22 y 29 kilómetros" },
                new RaceType { RaceTypeID=14,  Name="Entre 30 y 43km", Points=125, SportID=3, Memo="Carreras a pié entre 30 y 43 kilómetros" },
                new RaceType { RaceTypeID=15,  Name="Mayor de 43km", Points=150, SportID=3, Memo="Carreras a pié mayores de 43 kilómetros" },

                new RaceType { RaceTypeID=16,  Name="MTB menor de 40km", Points=80, SportID=4, Memo="Pruebas de bicicleta de Montaña menores de 40 kilómetros" },
                new RaceType { RaceTypeID=17,  Name="MTB entre 40 y 80km", Points=100, SportID=4, Memo="Pruebas de bicicleta de Montaña entre 40 y 80 kilómetros" },
                new RaceType { RaceTypeID=18,  Name="MTB mayor de 80km", Points=125, SportID=4, Memo="Pruebas de bicicleta de Montaña mayores de 80 kilómetros" },
                new RaceType { RaceTypeID=19,  Name="Crta menor de 100km", Points=100, SportID=4, Memo="Pruebas de bicicleta de carretera menores de 100 kilómetros" },
                new RaceType { RaceTypeID=20,  Name="Crta entre 100 y 200km", Points=125, SportID=4, Memo="Pruebas de bicicleta de carretera entre 100 y 200 kilómetros" },

                new RaceType { RaceTypeID=21,  Name="Menos de 2km", Points=25, SportID=5, Memo="Pruebas de natación menores de 2 kilómetros" },
                new RaceType { RaceTypeID=22,  Name="Entre 2 y 4km", Points=50, SportID=5, Memo="Pruebas de natación entre 2 y 4 kilómetros" },
                new RaceType { RaceTypeID=23,  Name="Mas de 4km", Points=80, SportID=5, Memo="Pruebas de natación mayores de 4 kilómetros" }                                
                 };
            return aListOfRaceTypes;
        }

<<<<<<< HEAD
=======
        private static List<Race> GetRaces()
        {
            Address anAdress = new Address();
            var aListOfRaces = new List<Race> {
                new Race { Id=1, Name="Media Maratón de Almería", Address =anAdress, RaceDate=Convert.ToDateTime("12/02/2014"), RaceTypeId=12 },
                new Race { Id=2, Name="Triatlón de Elche Arenales", Address =anAdress, RaceDate=Convert.ToDateTime("20/04/2014"), RaceTypeId=4 },
                new Race { Id=3, Name="Triatlón Cross Tarifa XChallenge", Address =anAdress, RaceDate=Convert.ToDateTime("12/06/2014"), RaceTypeId=3 },
                new Race { Id=4, Name="Ironman Lanzarote", Address =anAdress, RaceDate=Convert.ToDateTime("12/05/2014"), RaceTypeId=5 } };
            return aListOfRaces;
        }

>>>>>>> 25062f9c3961bf8b81819bae609e80f6be597f4b

        private static List<Member> GetMembers()
        {
            Address anAdress = new Address();
            var aListOfMembers = new List<Member> {
                new Member {UserName="adminuser",State=true,Federated=true,Visible=false,RegDate=DateTime.Now,FirstName="adminuser",SecondName="Administrador", Address=anAdress},
                new Member {UserName="dlirio",State=true,Federated=true,Visible=true,RegDate=DateTime.Now,FirstName="David",SecondName="Lirio Domingo", Address=anAdress},
                new Member {UserName="lofer",State=true,Federated=true,Visible=true,RegDate=DateTime.Now,FirstName="Jesus",SecondName="López Fernández", Address=anAdress},
                new Member {UserName="mmar",State=true,Federated=true,Visible=true,RegDate=DateTime.Now,FirstName="Maria del Mar",SecondName="Moral López", Address=anAdress},
                new Member {UserName="ugeHidalgo",State=true,Federated=true,Visible=true,RegDate=DateTime.Now,FirstName="Eugenio",SecondName="Hidalgo Hernández", Address=anAdress},
            };
            return aListOfMembers;
        }
    }
}
